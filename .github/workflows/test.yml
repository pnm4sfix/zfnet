# This workflow will install Python dependencies, run tests and lint.
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python

name: Test Python application

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        # Test all supported Python versions under Ubuntu
        os: [ubuntu-latest]
        python-version: ['3.12', '3.13']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U https://github.com/Thinklab-SJTU/pygmtools/archive/master.zip 
        pip install -r requirements.txt
    
    - name: Install project
      run: |
        pip install .
    - name: Run tests
      run: |
        pytest

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [build]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*



